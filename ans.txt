'./sleepycode
Calling sleep(), m = 0
Calling sleep(), m = 1
Calling sleep(), m = 2
Calling sleep(), m = 3
Calling sleep(), m = 4
     1.0000499600361

real	0m5,674s
user	0m0,666s
sys	0m0,004s
time ./regularcode
     1.0000499600361

real	0m0,679s
user	0m0,675s
sys	0m0,004s


./threadedcode
main thread result :      1.0000499600361
other thread result:      1.0000499600361

real	0m0,654s
user	0m1,296s
sys	0m0,008s

./sleepycode
Calling sleep(), m = 0
Calling sleep(), m = 1
Calling sleep(), m = 2
Calling sleep(), m = 3
Calling sleep(), m = 4
     1.0000499600361

real	0m5,674s
user	0m0,666s
sys	0m0,004s

./mallocycode
     1.0000059952043

real	0m2,276s
user	0m1,719s
sys	0m0,396s

./loop_invariants
fast
Done. sum = 649785664285041.375

real	0m1,095s
user	0m0,362s
sys	0m0,592s

./loop_invariants
slow
Done. sum = 649785664285041.375

real	0m0,889s
user	0m0,381s
sys	0m0,508s

./loop_invariants
slow no opti 
Done. sum = 649785664285041.375

real	0m1,315s
user	0m1,024s
sys	0m0,292s

./loop_invariants
fast no opti
Done. sum = 649785664285041.375

real	0m1,278s
user	0m1,050s
sys	0m0,228s

./string_loop
done fast

real	0m0,025s
user	0m0,025s
sys	0m0,000s

./string_loop
done slow 

real	0m1,063s
user	0m1,059s
sys	0m0,004s

./array_loop
zi = 1234
fast
real	0m0,003s
user	0m0,000s
sys	0m0,003s

./array_loop
zi = 1234
slow
real	0m0,003s
user	0m0,000s
sys	0m0,003s

Short circuit: 0,17s user 0,00s system 99% cpu 0,173 total

❯ time ./bounds_slow
./bounds_slow  0,04s user 0,00s system 21% cpu 0,209 total
❯ time ./bounds
./bounds  0,06s user 0,00s system 97% cpu 0,063 total

❯ gcc -o bounds bounds.c -O3
❯ ./bounds
❯ time ./bounds
./bounds  0,06s user 0,00s system 98% cpu 0,063 total
❯ gcc -o bounds_slow bounds.c -O3
❯ time ./bounds_slow
./bounds_slow  0,06s user 0,00s system 45% cpu 0,132 total

Task 3:
Ändra i denorms till 1e-49 ger noll som output - Close enough to zero

Task 4:
❯ time ./memset
diffFound = 0
./memset  0,02s user 0,00s system 94% cpu 0,025 total
❯ gcc -o memset_slow memset.c -O3
❯ time ./memset_slow
diffFound = 0
./memset_slow  0,03s user 0,00s system 8% cpu 0,348 total

Lab 6

Task-1
N = 100000
MERGESORT
Before sort: the number 7 occurs 95 times in the list.
Sorting list with length 100000 took   0.037 wall seconds.
After sort : the number 7 occurs 95 times in the list.
OK, list is sorted!
        0.04 real         0.03 user         0.00 sys


BUBBLESORT
N = 100000
Before sort: the number 7 occurs 95 times in the list.
Sorting list with length 100000 took   2.097 wall seconds.
After sort : the number 7 occurs 95 times in the list.
OK, list is sorted!
        2.40 real         2.09 user         0.00 sys

Task-2 
Char:
N = 100000
Before sort: the number 7 occurs 1021 times in the list.
Sorting list with length 100000 took   0.032 wall seconds.
After sort : the number 7 occurs 1021 times in the list.
OK, list is sorted!
        0.03 real         0.03 user         0.00 sys


Short int:
N = 100000
Before sort: the number 7 occurs 1021 times in the list.
Sorting list with length 100000 took   0.030 wall seconds.
After sort : the number 7 occurs 1021 times in the list.
OK, list is sorted!
        0.31 real         0.03 user         0.00 sys

int:
N = 100000
Before sort: the number 7 occurs 1021 times in the list.
Sorting list with length 100000 took   0.034 wall seconds.
After sort : the number 7 occurs 1021 times in the list.
OK, list is sorted!
        0.33 real         0.03 user         0.00 sys

long int:
N = 100000
Before sort: the number 7 occurs 1021 times in the list.
Sorting list with length 100000 took   0.030 wall seconds.
After sort : the number 7 occurs 1021 times in the list.
OK, list is sorted!
        0.30 real         0.03 user         0.00 sys

long long:
N = 100000
Before sort: the number 7 occurs 1021 times in the list.
Sorting list with length 100000 took   0.029 wall seconds.
After sort : the number 7 occurs 1021 times in the list.
OK, list is sorted!
        0.15 real         0.03 user         0.00 sys

Task-3
Using restrict:
transform_std tests took   0.064 wall seconds.
transform_opt tests took   0.063 wall seconds.
Checking correctness: max_abs_diff =        0
OK, result seems correct.
        0.29 real         0.28 user         0.00 sys

without restrict:
transform_std tests took   0.064 wall seconds.
transform_opt tests took   0.064 wall seconds.
Checking correctness: max_abs_diff =        0
OK, result seems correct.
        0.29 real         0.29 user         0.00 sys

With N1=20:
transform_std tests took   0.002 wall seconds.
transform_opt tests took   0.001 wall seconds.
Checking correctness: max_abs_diff =        0
OK, result seems correct.
        0.27 real         0.00 user         0.00 sys

Answer to question: no bigger effect using restrict. 

Task-4
With restrict:
transform_std tests took   0.221 wall seconds.
transform_opt tests took   0.188 wall seconds.
Checking correctness: max_abs_diff =        0
OK, result seems correct.
        0.70 real         0.40 user         0.00 sys

without restrict:
transform_std tests took   0.220 wall seconds.
transform_opt tests took   0.188 wall seconds.
Checking correctness: max_abs_diff =        0
OK, result seems correct.
        0.58 real         0.40 user         0.00 sys

Limit ti NP instead of np:
transform_std tests took   0.229 wall seconds.
transform_opt tests took   0.188 wall seconds.
Checking correctness: max_abs_diff =        0
OK, result seems correct.
        0.71 real         0.41 user         0.00 sys

with const:
transform_std tests took   0.225 wall seconds.
transform_opt tests took   0.047 wall seconds.
Checking correctness: max_abs_diff =        0
OK, result seems correct.
        0.54 real         0.27 user         0.00 sys

In transform_opt func:
with const:
transform_std tests took   0.224 wall seconds.
transform_opt tests took   0.047 wall seconds.
Checking correctness: max_abs_diff =        0
OK, result seems correct.
        0.69 real         0.27 user         0.00 sys

Without const:
transform_std tests took   0.224 wall seconds.
transform_opt tests took   0.047 wall seconds.
Checking correctness: max_abs_diff =        0
OK, result seems correct.
        0.38 real         0.27 user         0.00 sys

No difference.

Task-5
